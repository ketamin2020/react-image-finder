{"version":3,"sources":["components/Spinner.js","services/imagesApi.js","components/Searchbar.js","components/ImageGalleryItem.js","components/ImageGallery.js","components/Button.js","components/Modal.js","App.js","index.js"],"names":["Spinner","className","type","color","height","width","Component","query","page","URL","fetch","then","res","json","images","hits","Searchbar","state","inputValue","handleChange","e","setState","target","value","heandleSubmit","preventDefault","props","fetchOnSumit","onSubmit","this","placeholder","onChange","ImageGalleryItem","map","id","webformatURL","largeImageURL","onClick","openModal","key","src","alt","ImageGallery","Button","fetchImages","Modal","handleCloseModalonClick","nodeName","onClose","handleCloseModal","code","window","addEventListener","removeEventListener","largeImageUrl","App","searchQuery","loading","error","imagesApi","prevState","catch","finally","heandleSearchSubmit","heandleOpenModal","imageUrl","heandleCloseModal","prevProps","length","dataLength","next","hasMore","loader","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.240f5c86.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\nexport default class Spinner extends Component {\n  render() {\n    return (\n      <div className=\"Overlay\">\n        <div className=\"Modal\">\n          <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />;\n        </div>\n      </div>\n    );\n  }\n}\n","const fetchImagesArticle = (query, page) => {\n  const API_KEY = \"18038475-d13b74e7e60d256e98f342690\";\n  const URL = `https://pixabay.com/api/?key=${API_KEY}&q=${query}&image_type=photo&per_page=12&page=${page}`;\n  return fetch(URL).then((res) => res.json().then((images) => images.hits));\n};\nexport default {\n  fetchImagesArticle,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class Searchbar extends Component {\n  state = {\n    inputValue: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  heandleSubmit = (e) => {\n    e.preventDefault();\n    this.props.fetchOnSumit(this.state.inputValue);\n    this.setState({\n      inputValue: \"\",\n    });\n  };\n  render() {\n    return (\n      <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={this.heandleSubmit}>\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n\n          <input\n            value={this.state.inputValue}\n            className=\"SearchForm-input\"\n            type=\"text\"\n            placeholder=\"Search images and photos\"\n            onChange={this.handleChange}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func,\n  inputValue: PropTypes.string,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nexport default class ImageGalleryItem extends Component {\n  render() {\n    return this.props.images.map(\n      ({ id, webformatURL, type, largeImageURL }) => (\n        <li\n          className=\"ImageGalleryItem\"\n          onClick={() => this.props.openModal(largeImageURL)}\n          key={id}\n        >\n          <img\n            src={webformatURL}\n            alt={type}\n            className=\"ImageGalleryItem-image\"\n          />\n        </li>\n      )\n    );\n  }\n}\n\nImageGalleryItem.propTypes = {\n  images: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      webformatURL: PropTypes.string,\n      type: PropTypes.string,\n      largeImageURL: PropTypes.string,\n    })\n  ),\n  openModal: PropTypes.func,\n};\n","import React, { Component } from \"react\";\nimport ImageGalleryItem from \"./ImageGalleryItem\";\nimport PropTypes from \"prop-types\";\n\nexport default class ImageGallery extends Component {\n  render() {\n    return (\n      <ul className=\"ImageGallery\">\n        <ImageGalleryItem\n          images={this.props.images}\n          openModal={this.props.openModal}\n        />\n      </ul>\n    );\n  }\n}\n\nImageGallery.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.object),\n  openModal: PropTypes.func,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class Button extends Component {\n  render() {\n    return (\n      <button className=\"Button\" type=\"submit\" onClick={this.props.fetchImages}>\n        Load more\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class Modal extends Component {\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleCloseModal);\n    window.addEventListener(\"click\", this.handleCloseModalonClick);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleCloseModal);\n    window.removeEventListener(\"click\", this.handleCloseModalonClick);\n  }\n\n  handleCloseModalonClick = (e) => {\n    if (e.target.nodeName !== \"IMG\") {\n      this.props.onClose();\n    }\n  };\n\n  handleCloseModal = (e) => {\n    if (e.code === \"Escape\") {\n      this.props.onClose();\n    }\n  };\n  render() {\n    return (\n      <div className=\"Overlay\">\n        <div className=\"Modal\">\n          <img src={this.props.largeImageUrl} alt=\"Pixabay\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func,\n  largeImageUrl: PropTypes.string,\n};\n","import React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Spinner from \"./components/Spinner\";\nimport imagesApi from \"./services/imagesApi\";\nimport Searchbar from \"./components/Searchbar\";\nimport ImageGallery from \"./components/ImageGallery\";\nimport Button from \"./components/Button\";\nimport Modal from \"./components/Modal\";\nimport \"./index.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nexport default class App extends Component {\n  state = {\n    images: [],\n    searchQuery: \"\",\n    page: 1,\n    loading: false,\n    error: null,\n    largeImageUrl: null,\n  };\n  componentDidUpdate(prevProps, prevState) {\n    const prevQuery = prevState.searchQuery;\n    const nextQuery = this.state.searchQuery;\n    if (prevQuery !== nextQuery) {\n      this.fetchImages();\n    }\n  }\n\n  fetchImages = () => {\n    const { searchQuery, page } = this.state;\n    this.setState({ loading: true });\n    imagesApi\n      .fetchImagesArticle(searchQuery, page)\n      .then((images) =>\n        this.setState((prevState) => ({\n          images: [...prevState.images, ...images],\n          page: prevState.page + 1,\n        }))\n      )\n      .catch((error) => this.setState({ error }))\n      .finally(() => this.setState({ loading: false }));\n  };\n\n  heandleSearchSubmit = (query) => {\n    this.setState({\n      searchQuery: query,\n      page: 1,\n      images: [],\n    });\n  };\n\n  heandleOpenModal = (imageUrl) => {\n    this.setState({ largeImageUrl: imageUrl });\n  };\n\n  heandleCloseModal = () => {\n    this.setState({ largeImageUrl: null });\n  };\n\n  render() {\n    const { loading, images, largeImageUrl } = this.state;\n    return (\n      <>\n        <Searchbar fetchOnSumit={this.heandleSearchSubmit} />\n        {images.length > 0 && (\n          <InfiniteScroll\n            dataLength={images.length}\n            next={this.fetchImages}\n            hasMore={true}\n            loader={loading && <Spinner />}\n          >\n            <ImageGallery images={images} openModal={this.heandleOpenModal} />\n          </InfiniteScroll>\n        )}\n\n        {images.length > 0 && <Button fetchImages={this.fetchImages} />}\n        {largeImageUrl && <Spinner />}\n        {largeImageUrl && (\n          <Modal\n            largeImageUrl={largeImageUrl}\n            onClose={this.heandleCloseModal}\n          />\n        )}\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}